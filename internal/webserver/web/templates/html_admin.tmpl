{{ define "admin" }}
{{ template "header" . }}
 
      <div class="row">
        <div class="col">
		<div id="container" class="card" style="width: 80%">
		  <div class="card-body">
		    <h3 class="card-title">Upload</h3>
		    <br>
		    <p class="card-text"><form action="./uploadChunk"
			      class="dropzone"
			      id="uploaddropzone"></form>			
		<p></p><br>

		<div class="container-md">
		  <div class="row">
			  <div class="form-group col">
				<input class="form-check-input" type="checkbox" name="enableDownloadLimit" id="enableDownloadLimit" onchange="checkBoxChanged(this, 'allowedDownloads')" value="" aria-label="Enable Download Limit" {{ if not .DefaultUnlimitedDownload }} checked {{ end }}>
	     			<label class="control-label small" for="allowedDownloads">Limit Downloads</label>
				<div class="input-group mb-3">
					<input type="number" class="form-control admin-input" value="{{ .DefaultDownloads }}" name="allowedDownloads" id="allowedDownloads" min="1"  {{ if .DefaultUnlimitedDownload }} disabled {{ end }}  style="text-align: right;"/>
	  				<span class="input-group-text">Downloads</span>
				</div>
			 </div>
  			 <div class="break"></div>
	   		 <div class="form-group col">
				<input class="form-check-input" type="checkbox" name="enableTimeLimit" id="enableTimeLimit" onchange="checkBoxChanged(this, 'expiryDays')" value="" aria-label="Enable Time Limit"  {{ if not .DefaultUnlimitedTime }} checked {{ end }}>
	     			<label class="control-label  small" for="expiryDays">Expiry</label>
				<div class="input-group mb-3">
					<input type="number" class="form-control admin-input" value="{{ .DefaultExpiry }}" name="expiryDays" id="expiryDays" min="1"  {{ if .DefaultUnlimitedTime }} disabled {{ end }} style="text-align: right;"/>
	  				<span class="input-group-text">Days</span>
				</div>
			 </div>
  			 <div class="break"></div>
	    		 <div class="form-group col">
				<input class="form-check-input" type="checkbox" name="enablePassword" id="enablePassword" onchange="checkBoxChanged(this, 'password')" value="" aria-label="Enable Password Protection" {{ if ne .DefaultPassword "" }} checked {{ end }}>
	     			<label class="control-label  small" for="password">Password</label>
				<input class="form-control admin-input" value="{{ .DefaultPassword }}" name="password" id="password" placeholder="None" {{ if eq .DefaultPassword "" }} disabled {{ end }}/>
			  </div>
		  </div>
		</div>
		<br><br>
		<div class="table-responsive">
			<table class="table table-dark">
				<thead>
					<tr>
						<th scope="col">Filename</th>
						<th scope="col">Size</th>
						<th scope="col">Downloads remaining</th>
						<th scope="col">Stored until</th>
						<th scope="col">Downloads</th>
						<th scope="col">URL</th>
						<th scope="col">Actions</th>
					</tr>
				</thead>
				<tbody id="downloadtable">
{{ range .Items }}
	{{ if  or (gt .ExpireAt $.TimeNow) (.UnlimitedTime) }}
		{{ if or (gt .DownloadsRemaining 0) (.UnlimitedDownloads) }}
					<tr>
						<td scope="col">{{ .Name }}</td>
						<td scope="col">{{ .Size }}</td>
			{{ if .UnlimitedDownloads }}
						<td scope="col">Unlimited</td>
			{{ else }}
						<td scope="col">{{ .DownloadsRemaining }}</td>
			{{ end }}
			{{ if .UnlimitedTime }}
						<td scope="col">Unlimited</td>
			{{ else }}
						<td scope="col">{{ .ExpireAtString }}</td>
			{{ end }}
						<td scope="col">{{ .DownloadCount }}</td>
						<td scope="col"><a target="_blank" href="{{ $.Url }}{{ .Id }}">{{ $.Url }}{{ .Id }}</a>{{ if .IsPasswordProtected }} &#128274;{{ end }}</td>
						<td scope="col"><button type="button" data-clipboard-text="{{ $.Url }}{{ .Id }}" class="copyurl btn btn-outline-light btn-sm">Copy URL</button> 
			{{ if ne .HotlinkId "" }}
 						<button type="button" data-clipboard-text="{{ $.HotlinkUrl }}{{ .HotlinkId }}" class="copyurl btn btn-outline-light btn-sm">Copy Hotlink</button>
			{{ else }}
				{{ if and (not .IsPasswordProtected) (not .RequiresClientSideDecryption)  }}
	 						<button type="button" data-clipboard-text="{{ $.GenericHotlinkUrl }}{{ .Id }}" class="copyurl btn btn-outline-light btn-sm">Copy Hotlink</button>
				{{ else }}
 							<button type="button"class="copyurl btn btn-outline-light btn-sm disabled">Copy Hotlink</button>
				{{ end }}
			{{ end }}
						<button type="button" class="btn btn-outline-light btn-sm" onclick="window.location='./delete?id={{ .Id }}'">Delete</button></td>
					</tr>
		{{ end }}
	{{ end }}
{{ end }}
				</tbody>
			</table>
		      </div>
		  </div>
		</div>
	    </div>
   	 </div>

	<script src="./js/admin.js?v=12"></script>
	<script src="./js/end2end.js?v=1"></script>
       <script src="./js/wasm_exec.js"></script>
	<script>
	
	loadWasm(function() {
	    
	});
	
		Dropzone.options.uploaddropzone["maxFilesize"] = {{ .MaxFileSize }};
		Dropzone.options.uploaddropzone["timeout"] = 1200000;
		Dropzone.options.uploaddropzone["chunking"] = true;
		Dropzone.options.uploaddropzone["chunkSize"] = 10000000;
		Dropzone.options.uploaddropzone["forceChunking"] = true;
		Dropzone.options.uploaddropzone["retryChunks"] = true;
		Dropzone.options.uploaddropzone["retryChunksLimit"] = 3;
		Dropzone.options.uploaddropzone["retryChunks"] = true;
		
		
		dropzoneObject.uploadFiles = function(files) {
		    this._transformFiles(files, (transformedFiles) => {
			let transformedFile = transformedFiles[0];
			files[0].upload.chunked = true;
			console.log(files[0]);
			
			let filename = files[0].upload.filename; //TODO remove filename and contenttype
	       	 let plainTextSize = transformedFile.size;
	       	 let bytesSent = 0;
	       	 
	       	 console.log(plainTextSize);
	       	 console.log(transformedFile);
	       	 let encryptedSize = GokapiE2EEncryptNew(files[0].upload.uuid, plainTextSize, filename);  //TODO error checking
			
			files[0].upload.totalChunkCount = Math.ceil(
			    encryptedSize / this.options.chunkSize
			);

			let file = files[0];

			let bytesReadPlaintext = 0;
			let bytesSendEncrypted = 0;
			
			let finishedReading = false;
			let chunkIndex = 0;
			
			while (chunkIndex < files[0].upload.totalChunkCount) {
			
				let isLastChunk = false;
				let readEnd = bytesReadPlaintext + this.options.chunkSize;
				
				if (chunkIndex === files[0].upload.totalChunkCount -1) {
					isLastChunk = true;
					readEnd = plainTextSize;
				}
				
				let dataBlock = {
					name: this._getParamName(0),
					data: transformedFile.webkitSlice ?
					    transformedFile.webkitSlice(bytesReadPlaintext, readEnd) :
					    transformedFile.slice(bytesReadPlaintext, readEnd),
					filename: "endtoend.encrypted",
					chunkIndex: chunkIndex,
				    };
				     
				     console.log(typeof dataBlock.data);
				    bytesReadPlaintext = bytesReadPlaintext + dataBlock.data.size;
				    dataBlock.data = GokapiE2EEncryptChunk(files[0].upload.uuid,dataBlock.data.size, isLastChunk, data);
				    bytesSendEncrypted = bytesSendEncrypted + dataBlock.data.size;

				    file.upload.chunks[chunkIndex] = {
					file: file,
					index: chunkIndex,
					dataBlock: dataBlock, // In case we want to retry.
					status: Dropzone.UPLOADING,
					progress: 0,
					retries: 0, // The number of times this block has been retried.
				    };

				chunkIndex++;
				this._uploadData(files, [dataBlock]);
			}


			file.upload.finishedChunkUpload = (chunk, response) => {
			    let allFinished = true;
			    chunk.status = Dropzone.SUCCESS;

			    // Clear the data from the chunk
			    chunk.dataBlock = null;
			    // Leaving this reference to xhr intact here will cause memory leaks in some browsers
			    chunk.xhr = null;

			    for (let i = 0; i < file.upload.totalChunkCount; i++) {
				if (file.upload.chunks[i] === undefined) {
				    return handleNextChunk();
				}
				if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {
				    allFinished = false;
				}
			    }

			    if (allFinished) {
				this.options.chunksUploaded(file, () => {
				    this._finished(files, response, null);
				});
			    }
			};

			if (this.options.parallelChunkUploads) {
			    for (let i = 0; i < file.upload.totalChunkCount; i++) {
				handleNextChunk();
			    }
			} else {
			    handleNextChunk();
			}
		    });
		};
			
	</script>


{{ template "footer" }}
{{ end }}
