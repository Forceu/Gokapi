{{define "setup"}}<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Gokapi Setup</title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link href="./bootstrap/bootstrap.css" rel="stylesheet" />
		<link href="./src/bootstrap-wizard.css" rel="stylesheet" />
		<link href="./chosen/chosen.css" rel="stylesheet" />
		<style>
			.wizard-modal p {
				margin: 0 0 10px;
				padding: 0;
			}

			#wizard-ns-detail-servers, .wizard-additional-servers {
				font-size: 12px;
				margin-top: 10px;
				margin-left: 15px;
			}
			#wizard-ns-detail-servers > li, .wizard-additional-servers li {
				line-height: 20px;
				list-style-type: none;
			}
			#wizard-ns-detail-servers > li > img {
				padding-right: 5px;
			}

			.wizard-modal .chzn-container .chzn-results {
				max-height: 150px;
			}
			.wizard-addl-subsection {
				margin-bottom: 40px;
			}
			.create-server-agent-key {
				margin-left: 15px; 
				width: 90%;
			}
		</style>
		<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
		<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
		<!--[if lt IE 9]>
		<script src="js/html5shiv-3.7.0.js"></script>
		<script src="js/respond-1.3.0.min.js"></script>
		<![endif]-->
	</head>
	<body style="padding:30px;">

		

		<div class="wizard" id="satellite-wizard" data-title="Gokapi Setup">



			<!-- Step 0 Welcome -->
			<div class="wizard-card wizard-card-overlay" data-cardname="Welcome">
				<h3>Welcome</h3>

				<div class="wizard-input-section">
				
{{ if .IsInitialSetup }}
					<p>
						Thank you for choosing Gokapi! This setup will guide you through the Gokapi installation. For further information please refer to the <a href="https://gokapi.readthedocs.io/en/stable/" title="Gokapi Documentation" target="_blank">documentation</a>.
					</p>
{{ else }}
					<p>
						You can now change the Gokapi configuration. For further information please refer to the <a href="https://gokapi.readthedocs.io/en/stable/" title="Gokapi Documentation" target="_blank">documentation</a>.
					</p>
{{end}}

				</div>
			</div>
			
			
			<!-- Step 1 Webserver -->
			<div class="wizard-card wizard-card-overlay" data-cardname="webserver1">
				<h3>Webserver 1/2</h3>

				<div class="wizard-input-section">
					<div class="form-group">

							  <label for="localhost_sel">Make webserver only accessable on this machine (bind to localhost)</label>
						<select name="localhost_sel" id="localhost_sel"  style="width:350px;" class="select form-control">	
								<option value="0" selected>No</option>
								<option value="1">Yes</option>

						</select><br><br>
							
							  <label for="ssl_sel">Use SSL (a self-signed certificate will be generated that can be replaced)</label>
						<select name="ssl_sel" id="ssl_sel" style="width:350px;" onChange="urlParamChanged()" class="select form-control">
								<option value="0" selected>No</option>
								<option value="1">Yes</option>

						</select>
					</div>
				</div>
			</div>
			
			<!-- Step 2 Webserver 2 -->
			<div class="wizard-card wizard-card-overlay" data-cardname="webserver2">
				<h3>Webserver 2/2</h3>

				<div class="wizard-input-section">
					<div class="form-group">
							<div class="col-sm-8">
							  <label for="port">Port:</label>
								<input type="number" class="form-control" id="port" name="port" value="53842" min="1" max="65535" placeholder="Port number" data-min="1" data-validate="validateMinLength" required onChange="urlParamChanged()">
							</div><br><br><br>
							

							<div class="col-sm-8">
							  <label for="url">Public facing URL:</label>
								<input type="text" class="form-control" id="url" name="url" value="http://127.0.0.1:53842/" onfocusout="extUrlChanged(this)" placeholder="Public URL" data-min="8" required data-validate="validateUrl">
							</div><br><br><br>
							

							<div class="col-sm-8">
							  <label for="url_redirection">Redirection URL for the index:</label>
								<input type="text" class="form-control" id="url_redirection" name="url_redirection" value="https://github.com/Forceu/Gokapi/" placeholder="Redirection URL" required data-min="1" data-validate="validateMinLength">
							</div>
						</div>
				</div>
			</div>
			
			


			<!-- Step 3 Auth -->
			<div class="wizard-card wizard-card-overlay" data-cardname="authentication">
				<h3>Authentication</h3>

				<div class="wizard-input-section">
					<div class="form-group">
					<p>
						Please select the method for logging in to the admin panel
					</p>


						<select name="authentication_sel" id="authentication_sel" style="width:350px;" class="select form-control" onchange="authSelectionChanged(this.value);">
							<optgroup label="Standalone">
								<option value="0" selected>Username / Password</option>
								<option value="1" >OAuth2 OpenID Connect</option>
							</optgroup>

							<optgroup label="Reverse Proxy">
								<option value="2">Header Authentication</option>
								<option value="3">Access Restriction</option>
							</optgroup>

						</select>
					</div>
				</div>
			</div>

			<!-- Step 4 Credentials PW -->
			<div class="wizard-card wizard-card-overlay" data-cardname="credentials">
				<h3>Credentials</h3>


				<div class="wizard-input-section">
						<div class="form-group">
					<p>
						Please enter a username and password for the admin user
					</p>

							<div class="col-sm-8">
								<input type="text" class="form-control" id="auth_username" name="auth_username" placeholder="Username" data-min="3" required data-validate="validateMinLength">
							</div><br><br>
							<div class="col-sm-8">
								<input type="password" autocomplete="new-password" class="form-control" id="auth_pw" name="auth_pw" placeholder="Password" data-min="8" required data-validate="validatePassword">
							</div><br><br>
							<div class="col-sm-8">
								<input type="password" autocomplete="new-password" class="form-control" id="auth_pw2" name="auth_pw2" placeholder="Password (repeat)" data-min="8" required>
						</div>
					</div>


				</div>
			</div>
			
			<!-- Step 4 Credentials Oauth -->
			<div class="wizard-card wizard-card-overlay" data-cardname="credentials-oauth">
				<h3>Credentials</h3>


					<div class="wizard-input-section">
						<div class="form-group">
					<p>
						Please enter the OIDC client configuration. Add the allowed users to the list below (seperated by semicolon) or leave it blank if access is granted to all authenticated users.<br>
					</p>

							<div class="col-sm-8">
							  <label for="oauth_provider">Provider URL:</label>
								<input type="text" class="form-control" id="oauth_provider" name="oauth_provider" placeholder="Provider URL" data-min="1" required data-validate="validateMinLength">
							</div>

							<div class="col-sm-8">
							  <label for="oauth_id">Client ID:</label>
								<input type="text" class="form-control" id="oauth_id" name="oauth_id" placeholder="Client ID" data-min="1" required data-validate="validateMinLength">
							</div>

							<div class="col-sm-8">
							  <label for="oauth_secret">Client Secret:</label>
								<input type="text" class="form-control" id="oauth_secret" name="oauth_secret" placeholder="Client Secret" data-min="1" required data-validate="validateMinLength">
							</div>
							
							<div class="col-sm-8">
							  <label for="oauth_header_users">Authorised users:</label>
								<input type="text" class="form-control" id="oauth_header_users" name="oauth_header_users" placeholder="Authorised users">
							</div>
							
							<div class="col-sm-8">
							  <label for="oauth_redir">Redirection URL:</label>
{{ if .IsInitialSetup }}
								<input type="text" class="form-control" id="oauth_redir" name="oauth_redir" disabled value="http://127.0.0.1:53842/oauth-callback">
{{ else }}
								<input type="text" class="form-control" id="oauth_redir" name="oauth_redir" disabled value="{{ .Settings.ServerUrl }}oauth-callback">
{{ end }}
							</div>

					</div>

				</div>
			</div>
			
			<!-- Step 4 Credentials Header -->
			<div class="wizard-card wizard-card-overlay" data-cardname="credentials-header">
				<h3>Credentials</h3>


				<div class="wizard-input-section">
						<div class="form-group">
					<p>
						Enter the key of the header that will be provided from your reverse proxy containing the username.<br>Add the allowed users to the list below (seperated by semicolon) or leave it blank if access is granted to all authenticated users.<br><br>
					</p>

							<div class="col-sm-8">
							  <label for="auth_headerkey">Header Key:</label>
								<input type="text" class="form-control" id="auth_headerkey" name="auth_headerkey" required placeholder="Header Key" data-validate="validateMinLength">
							</div><br><br>
							
							<div class="col-sm-8">
							  <label for="auth_header_users">Authorised users:</label>
								<input type="text" class="form-control" id="auth_header_users" name="auth_header_users" placeholder="Authorised users">
							</div>
					</div>
				</div>
			</div>
			<!-- Step 4 Credentials Disbabled -->
			<div class="wizard-card wizard-card-overlay" data-cardname="credentials-disabled">
				<h3>Credentials</h3>


				<div class="wizard-input-section">
					<p>
						<span style="color:#FF0000;">Warning:</span> This setting will disable authentication completely! You will need to secure the following URLs with your reverse proxy:
						
						<ul>
						  <li>/admin</li>
						  <li>/apiDelete</li>
						  <li>/apiKeys</li>
						  <li>/apiNew</li>
						  <li>/delete</li>
						  <li>/upload</li>
						</ul>

						Only proceed if you know what you are doing!
					</p>

				</div>
			</div>



			<!-- Step 5 Storage -->
			<div class="wizard-card wizard-card-overlay" data-cardname="storage">
				<h3>Storage</h3>

				<div class="wizard-input-section">
					<p>
						Select if you want to store files locally or on an S3 compatible cloud infrastructure
					</p>

					<select name="storage_sel" id="storage_sel" style="width:350px;" class="select form-control" onchange="storageSelectionChanged(this.selectedIndex);">
							<option value="local" selected>Local Storage</option>
							<option value="cloud" {{ if not .HasAwsFeature }} disabled {{ end }} >Cloud Storage</option>

					</select>
					
{{ if not .HasAwsFeature }}
					<p><br><br><i>This build has been compiled without AWS support, therefore cloud storage is not available.</i></p>
{{ end }}					

				</div>
			</div>
			
			
			<!-- Step 6 S3 Credentials -->
			<div class="wizard-card wizard-card-overlay" data-cardname="s3credentials">
				<h3>S3 Credentials</h3>

				<div class="wizard-input-section">
				
					<div class="form-group">
							<div class="col-sm-8">
							  <label for="s3_bucket">Bucket Name:</label>
								<input type="text" class="form-control" id="s3_bucket" name="s3_bucket" placeholder="Bucket Name" data-min="1" data-validate="validateMinLength">
							</div><br><br>
							<div class="col-sm-8">
							  <label for="s3_region">Region Name:</label>
								<input type="text" class="form-control" id="s3_region" name="s3_region" placeholder="Region Name" required data-min="1" data-validate="validateMinLength">
							</div><br><br>
							<div class="col-sm-8">
							  <label for="s3_api">API Key:</label>
								<input type="text" class="form-control" id="s3_api" name="s3_api" placeholder="API Key" required data-min="1" data-validate="validateMinLength">
							</div><br><br>
							
							<div class="col-sm-8">
							  <label for="s3_secret">API Key Secret:</label>
								<input type="text" class="form-control" id="s3_secret" name="s3_secret" placeholder="API Key Secret" required data-min="1" data-validate="validateMinLength">
							</div><br><br>
							<div class="col-sm-8">
							  <label for="s3_endpoint">Endpoint:</label>
								<input type="text" class="form-control" id="s3_endpoint" name="s3_endpoint" placeholder="Endpoint (leave blank if AWS S3)">
							</div>
						</div>
				</div>
			</div>
			

			<!-- Step 7 Encryption -->
			<div class="wizard-card wizard-card-overlay" data-cardname="encryption">
				<h3>Encryption Level</h3>

				<div class="wizard-input-section">
						<div class="form-group">
					
{{ if not .IsInitialSetup }}
				<p>
					<span style="color:red"><b>Warning:</b> Changing the encryption level will delete all existing encrypted files! Other existing files will remain unencrypted.
				</p><br>
{{ end }}
					

					<select name="encrypt_sel" id="encrypt_sel" style="width:350px;" class="select form-control" onchange="encryptionSelectionChanged(this.selectedIndex, false);">
							<option value="0" selected>Level 0 - No encryption</option>
							<option value="1" >Level 1 - Local encryption / Key locally</option>
							<option value="2" >Level 1 - Local encryption / Key on startup</option>
							<option value="3" >Level 2 - Full encryption / Key locally</option>
							<option value="4" >Level 2 - Full encryption / Key on startup</option>
							<!-- <option value="5" disabled>Level 3 - End-To-End encryption (not implemented yet)</option> -->
					</select>
					
					<div id="encinfo0">
					<p><br><br><b>Level 0 - No encryption</b>
					<ul>
					  <li>All files are stored in plain text on the local or remote server</li>
					  <li>Uses the least ressources</li>
					  <li>Supports hotlinks to images</li>
					  <li>Supports download progress bar</li>
					  <li>Gokapi starts without user input</li>
					</ul></p>
					</div>
					
					<div id="encinfo1">
					<p><br><br><b>Level 1 - Local Key</b>
					<ul>
					  <li>Local files are encrypted, remote files (S3) are stored in plain text</li>
					  <li>Decryption is done server-side</li>
					  <li>Supports hotlinks to images</li>
					  <li>Does not support download progress bar</li>
					  <li>Gokapi starts without user input</li>
					  <li><b>Warning:</b> Password can be read with access to Gokapi configuration</li>
					  <li><b>Warning:</b> Encryption has not been audited.</li>
					</ul></p>
					</div>
					
					<div id="encinfo2">
					<p><br><br><b>Level 1 - User Input</b>
					<ul>
					  <li>Local files are encrypted, remote files (S3) are stored in plain text</li>
					  <li>Decryption is done server-side</li>
					  <li>Supports hotlinks to images</li>
					  <li>Does not support download progress bar</li>
					  <li>Password cannot be read with access to Gokapi configuration</li>
					  <li><b>Warning:</b> Gokapi requires user input to start</li>
					  <li><b>Warning:</b> Encryption has not been audited.</li>
					</ul></p>
					</div>
					
					<div id="encinfo3">
					<p><br><br><b>Level 2 - Local Key</b>
					<ul>
					  <li>All files are encrypted</li>
					  <li>Decryption for local files is done server-side</li>
					  <li>Decryption for remote files (S3) is done client-side, requires 2MB file to load on first visit</li>
					  <li>Only supports hotlinks to images saved locally</li>
					  <li>Does not support download progress bar</li>
					  <li>Gokapi starts without user input</li>
					  <li><b>Important:</b> For remote storage, CORS settings for the bucket need to allow access from the Gokapi URL</li>
					  <li><b>Warning:</b> Password can be read with access to Gokapi configuration</li>
					  <li><b>Warning:</b> Encryption has not been audited.</li>
					</ul></p>
					</div>
					
					<div id="encinfo4">
					<p><br><br><b>Level 2 - User Input</b>
					<ul>
					  <li>All files are encrypted</li>
					  <li>Decryption for local files is done server-side</li>
					  <li>Decryption for remote files (S3) is done client-side, requires 2MB file to load on first visit</li>
					  <li>Only supports hotlinks to images saved locally</li>
					  <li>Does not support download progress bar</li>
					  <li>Password cannot be read with access to Gokapi configuration</li>
					  <li><b>Important:</b> For remote storage, CORS settings for the bucket need to allow access from the Gokapi URL</li>
					  <li><b>Warning:</b> Gokapi requires user input to start</li>
					  <li><b>Warning:</b> Encryption has not been audited.</li>
					</ul></p>
					</div>
					
					
					<div id="encinfo5">
					<p><br><br><b>Level 3 - NOT IMPLEMENTED YET</b>
					<ul>
					  <li>All files are encrypted end-to-end</li>
					  <li>Encryption and decryption is done client-side and requires 2MB file to load on first visit</li>
					  <li>Does not support hotlinks to images</li>
					  <li>Does not support download progress bar</li>
					  <li>Gokapi starts without user input</li>
					  <li>Password cannot be read with access to Gokapi configuration</li>
					  <li><b>Warning:</b> Encryption has not been audited.</li>
					</ul></p>
					</div>

				</div>
				</div>
			</div>
			

			<!-- Step 8 Encryption PW -->
			<div class="wizard-card wizard-card-overlay" data-cardname="encryptionpw">
				<h3>Encryption Master Password</h3>

				<div class="wizard-input-section">
						<div class="form-group">
					
{{ if not .IsInitialSetup }}
				<p>
					<span style="color:red"><b>Warning:</b> Changing the encryption password will delete all existing encrypted files! Other existing files will remain unencrypted.</span>
				</p><br>
{{ end }}
					
				<p>
					Please enter the master password for encryption. It has to be entered on the commandline every time Gokapi is started.
				</p><br>

					
							<div class="col-sm-8">
								<input type="password" autocomplete="new-password" class="form-control" id="enc_pw" name="enc_pw" placeholder="Password" data-min="8" required data-validate="validatePassword2" value="{{ if not .IsInitialSetup }}unc{{end}}">
							</div><br><br>
							<div class="col-sm-8">
								<input type="password" autocomplete="new-password" class="form-control" id="enc_pw2" name="enc_pw2" placeholder="Password (repeat)" data-min="8" required value="{{ if not .IsInitialSetup }}unc{{end}}">
						</div>
		
					</div>
				</div>
			</div>
			
			



			<!-- Step 9 Finish -->
			
			<div class="wizard-card">
				<h3>Finish</h3>

				<div class="wizard-input-section">
					<p>Gokapi has been fully set up. Click on Submit to save the configuration.
					</p>

				</div>
				<div class="wizard-error">
					<div class="alert alert-error">
						<strong>There was a problem</strong> with your submission.
						Please correct the errors and re-submit.
					</div>
				</div>
	
				<div class="wizard-failure">
					<div class="alert alert-error">
						There was a problem submitting the configuration.<br><br>The following error was raised: <span style="font-weight:bold" id="errormessage"></span><br><br>The server responded with: <span style="font-weight:bold" id="errormessage_response"></span>
					</div>
				</div>
	
				<div class="wizard-success">
					<div class="alert alert-success">
						<span class="create-server-name"></span>Gokapi has been set up <strong>successfully.</strong>
					</div>
	
					<a class="btn btn-success im-done">Continue</a>
				</div>
			</div>
		</div>

		<script src="./js/jquery-2.0.3.min.js"></script>
		<script src="./chosen/chosen.jquery.js"></script>
		<script src="./js/bootstrap.js" ></script>
		<script src="./js/prettify.js"></script>
		<script src="./src/bootstrap-wizard.js"></script>
		<script>
		var wizard;
			$(document).ready(function() {
				wizard = $('#satellite-wizard').wizard({
					keyboard : false,
					contentHeight : 500,
					contentWidth : 800,
					showClose : false,
					submitUrl: "./setupResult",
					backdrop: 'static'
				});
				
				
				
				wizard.el.find(".wizard-success .im-done").click(function() {
					window.location.href = $("#url").val()+"admin";
				});
			
			
				wizard.cards["credentials-oauth"].disable(true);
				wizard.cards["credentials-header"].disable(true);
				wizard.cards["credentials-disabled"].disable(true);
				wizard.cards["s3credentials"].disable(true);
				wizard.cards["encryptionpw"].disable(true);
				
					
{{ if not .IsInitialSetup }}
	{{ if .LocalhostOnly }}
				document.getElementById("localhost_sel").selectedIndex = 1;
	{{ end }}
	{{ if .Settings.UseSsl }}
				document.getElementById("ssl_sel").selectedIndex = 1;
	{{ end }}
				document.getElementById("port").value = "{{ .Port }}";
				document.getElementById("url").value = "{{ .Settings.ServerUrl }}";
				document.getElementById("url_redirection").value = "{{ .Settings.RedirectUrl }}";
				document.getElementById("authentication_sel").value = "{{ .Auth.Method }}";
				authSelectionChanged("{{ .Auth.Method }}")
				
				switch ({{ .Auth.Method }}) {
				  case 0:
				    document.getElementById("auth_username").value = "{{ .Auth.Username }}";
				    document.getElementById("auth_pw").value = "unc";
				    document.getElementById("auth_pw2").value = "unc";
				    break;
				  case 1:
				    document.getElementById("oauth_provider").value = "{{ .Auth.OauthProvider }}";
				    document.getElementById("oauth_id").value = "{{ .Auth.OAuthClientId }}";
				    document.getElementById("oauth_secret").value = "{{ .Auth.OAuthClientSecret }}";
				    document.getElementById("oauth_header_users").value = "{{ .OAuthUsers }}";
				    break;
				  case 2:
				    document.getElementById("auth_headerkey").value = "{{ .Auth.HeaderKey }}";
				    document.getElementById("auth_header_users").value = "{{ .HeaderUsers }}";
				    break;
				}

	{{ if .CloudSettings.Aws.Bucket }}				
				document.getElementById("storage_sel").value = "cloud";
				storageSelectionChanged(1);
				document.getElementById("s3_bucket").value = "{{ .CloudSettings.Aws.Bucket }}";
				document.getElementById("s3_region").value =  "{{ .CloudSettings.Aws.Region }}";
				document.getElementById("s3_api").value = "{{ .CloudSettings.Aws.KeyId }}";
				document.getElementById("s3_secret").value =  "{{ .CloudSettings.Aws.KeySecret }}";
				document.getElementById("s3_endpoint").value =  "{{ .CloudSettings.Aws.Endpoint }}";
	{{ end }}
				
				
{{ end }}


				wizard.on("submit", function(wizard) {
					
					 $.ajax({
						type: "POST",
						url: wizard.args.submitUrl,
						data: JSON.stringify(wizard.serializeArray()),
    						contentType: "application/json; charset=utf-8",
						dataType: "json"
					    }).done(function(response) {
						setTimeout(() => {
							wizard.submitSuccess();
							wizard.hideButtons();
							wizard.updateProgressBar(0);
						}, 1500);
					    }).fail(function(xhr, textStatus, errorThrown) {
					     $('#errormessage').text(errorThrown);
					     $('#errormessage_response').text(xhr.responseText);
						wizard.submitFailure();
						wizard.hideButtons();
					    });
			
				});


			});
			
			
			function validateMinLength(el) {
				let value = el.val();
				let retValue = {};
				
				if (value.length == 0) {
					retValue.status = false;
					retValue.msg = "Please enter a value";
					return retValue;
				}
				
				if (value.length < el[0].dataset.min) {
					retValue.status = false;
					retValue.msg = "Needs to be at least "+el[0].dataset.min+" characters long";
				} else {
					retValue.status = true;
				}

				return retValue;
			}
			
			function validateUrl(el) {
				let value = el.val();
				let retValue = {};
				
				if (!value.startsWith("http://") && !value.startsWith("https://")) {
					retValue.status = false;
					retValue.msg = "URL must start with http:// or https://";
					return retValue;
				}
				let minLenghtStatus = validateMinLength(el);
				if (minLenghtStatus.status == false)
					return minLenghtStatus;
					
				retValue.status = true;
				return retValue;
			}
			
			
			function validatePassword(el) {
				let value = el.val();
{{ if not .IsInitialSetup }}
				if (value == "unc")
					return true;
{{end}}
				let minLenghtStatus = validateMinLength(el);
				if (minLenghtStatus.status == false)
					return minLenghtStatus;
					
				let retValue = {};

				if (value != $('#auth_pw2').val()) {
					retValue.status = false;
					retValue.msg = "Passwords do not match";
				} else {
					retValue.status = true;
				}

				return retValue;
			}

			function validatePassword2(el) {
				let value = el.val();
{{ if not .IsInitialSetup }}
				if (value == "unc")
					return true;
{{end}}
				let minLenghtStatus = validateMinLength(el);
				if (minLenghtStatus.status == false)
					return minLenghtStatus;
					
				let retValue = {};

				if (value != $('#enc_pw2').val()) {
					retValue.status = false;
					retValue.msg = "Passwords do not match";
				} else {
					retValue.status = true;
				}

				return retValue;
			}

			function storageSelectionChanged(index) {
				let card = wizard.cards["s3credentials"];
				if (index==0) 
					card.disable(true);
				else if (index==1) 
					card.enable();
			}

			$(function() {
				wizard.show();

{{ if .IsInitialSetup }}			
				encryptionSelectionChanged(0, true);
{{ else }}
				document.getElementById("encrypt_sel").value={{.EncryptionLevel}};
				encryptionSelectionChanged({{.EncryptionLevel}}, true);
{{ end }}
			});
			
			function encryptionSelectionChanged(index, initial) {
				for (let i = 0; i < 6; i++) {
				 	document.getElementById("encinfo"+i).style.display = "none";
				}
				document.getElementById("encinfo"+index).style.display = "block";
				if (index==2 || index==4) 
					wizard.cards["encryptionpw"].enable();
				else
					wizard.cards["encryptionpw"].disable(true);
			}
			

				
			function extUrlChanged(el) {
				let lastChar = el.value.substr(-1); 
				if (lastChar != '/') 
					el.value = (el.value + '/') 
					
				document.getElementById("oauth_redir").value = el.value + "oauth-callback";
			}
			
{{ if .IsInitialSetup }}
			var previousPort = "53842";
{{ else }}
			var previousPort = "{{ .Port }}";
{{ end }}
			
			
			function urlParamChanged() {
				let ssl = document.getElementById("ssl_sel").value;
				let url = document.getElementById("url").value;
				let port = document.getElementById("port").value;
				let defaultNoSsl = "http://127.0.0.1:" + previousPort + "/";
				let defaultSsl = "https://127.0.0.1:" + previousPort + "/";
				
				if (url == defaultNoSsl || url == defaultSsl) {
					if (ssl == "0")
						document.getElementById("url").value = "http://127.0.0.1:" + port + "/";
					else
						document.getElementById("url").value = "https://127.0.0.1:" + port + "/";
				}
				previousPort = port;
			}
				
				
			function authSelectionChanged(value) {
				wizard.cards["credentials"].disable(true);
				wizard.cards["credentials-oauth"].disable(true);
				wizard.cards["credentials-header"].disable(true);
				wizard.cards["credentials-disabled"].disable(true);
				switch (value) {
					  case '0':
						wizard.cards["credentials"].enable();
					    break;
					  case '1':
						wizard.cards["credentials-oauth"].enable();
					    break;
					  case '2':
						wizard.cards["credentials-header"].enable();
					    break;
					  case '3':
						wizard.cards["credentials-disabled"].enable();
					    break;
				}

			}

			
		</script>
	</body>
</html>
{{ end }}
